AC_ARG_WITH([fesvr],
  [AS_HELP_STRING([--with-fesvr],
    [path to your fesvr installation if not in a standard location])],
  [
    LDFLAGS="-L$withval/lib $LDFLAGS"
    CFLAGS="-I$withval/include $CFLAGS"
  ]
)

AC_CHECK_LIB(fesvr, libfesvr_is_present, [], [AC_MSG_ERROR([libfesvr is required])])

AC_CHECK_LIB(pthread, pthread_create, [], [AC_MSG_ERROR([libpthread is required])])

AC_ARG_ENABLE([fpu], AS_HELP_STRING([--disable-fpu], [Disable floating-point]))
AS_IF([test "x$enable_fpu" != "xno"], [
  AC_DEFINE([RISCV_ENABLE_FPU],,[Define if floating-point instructions are supported])
])

AC_ARG_ENABLE([64bit], AS_HELP_STRING([--disable-64bit], [Disable 64-bit mode]))
AS_IF([test "x$enable_64bit" != "xno"], [
  AC_DEFINE([RISCV_ENABLE_64BIT],,[Define if 64-bit mode is supported])
])

AC_ARG_ENABLE([rvc], AS_HELP_STRING([--enable-rvc], [Enable instruction compression]))
AS_IF([test "x$enable_rvc" = "xyes"], [
  AC_DEFINE([RISCV_ENABLE_RVC],,[Define if instruction compression is supported])
])

AC_ARG_ENABLE([vec], AS_HELP_STRING([--disable-vec], [Disable vector processor]))
AS_IF([test "x$enable_vec" != "xno"], [
  AC_DEFINE([RISCV_ENABLE_VEC],,[Define if vector processor is supported])
])
